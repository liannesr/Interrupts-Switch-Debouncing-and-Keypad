//------------------------ LIBRARIES INCLUDED ---------------------------//
#include <msp430.h> 
#include <stdio.h>
#include <lcd.h>

//------------------------ GLOBAL VARIABLES------------------------------//
int aOld=0; //State A old
int bOld=0; //State B old
int aNew=0; //State A new
int bNew=0; //State B new
unsigned int state; //State
unsigned int oldState; //Old State

//------------------------------ MAIN ----------------------------------//
int main(void)
{
    WDTCTL = WDTPW | WDTHOLD;   //Stop watchdog timer
    P1DIR = 0xE7;                //Pins 1.3 y 1.4 as input, since they are connected to the opto switches.

    unsigned int lookUp[16] = {0,1,2,0,2,0,0,1,1,0,0,2,0,2,1,0}; //The lookUp table for our states.
    unsigned char *ListOfMessages[] = {"1.Hola","2.somos","3.Giovanni","4.Lianne",
                                       "5.Yamuel","6.estudiantes","7.de","8.Micro 2.",
                                       "9.Nos","10.gusta","11.el","12.software","13.y",
                                       "14.el","15.hardware","16.Adios", "17.lol"};
    initialize();
    P1IE = 0x18;                //Interrupt enable on pins P1.3 and P1.4 which are the opto switches.
    P1IES = 0x00;               //Both in white space which is known as the starting state.
    P1IFG = 0x00;
    __enable_interrupt();       //Global interrupt enable.
    state = 0;                  //The application starts with the initial state at 0.
    oldState = 0;               //Initializing the variable to 0.
    int counter=0;              //Initializing a counter variable to move through the list of messages.

                              //Initializing the LCD with function of the LCD.h library.
    writeMessage(ListOfMessages[counter]);  //Writing the first element of the message list.
    setCursorDown();                        //Moving cursor down on the LCD.
    writeMessage(ListOfMessages[counter+1]);//Writing the next element of the message list.

    while(1){                               //Continuous loop.
        if(lookUp[oldState] == 1){          //If the content of the lookUp table is one it moved forward.

            clear();                        //Clearing the LCD display.
            setCursorUp();                  //Set the cursor of the LCD in the upper line.
            writeMessage(ListOfMessages[(counter +1 )% 17]);     //Writing the message found in position counter.
            setCursorDown();                //Set the cursor of the LCD in the lower line
            writeMessage(ListOfMessages[(counter+2) % 17]); //Writing message in position counter+1.
            counter++;                         //We Increment the value of counter by one;
            oldState = 0;                   //Re-setting the oldState to 0.
        }

        else if (lookUp[oldState] == 2){//If the content of the lookUp table is two it moved backward.

            if(counter<=0)              //If counter is a non-positive value then is out of range.
                counter=17;             //We set counter to the length of the array.
            clear();                    //Clearing LCD display with function from lcd.h library.
            setCursorUp();              //Setting cursor in the upper line of the lcd display.
            writeMessage(ListOfMessages[(counter -1) % 17]);//Writing the message found in position counter -1.
            setCursorDown();            //Setting cursor in the lower line of the lcd display.
            writeMessage(ListOfMessages[(counter )% 17]);     //Writing the message found in position counter.
            counter--;                  //We decrement the counter by the value of one.
            oldState = 0;                   //Re-setting the oldState to 0.

        }

    }
    return 0;                           //Returning void.
}


//------------------------ INTERRUPT ------------------------------------//
#pragma vector = PORT1_VECTOR       //Interrupt enable in Port 1
__interrupt void P1_ISR(void) {

    if((P1IFG & 0x18) == 0x10) {    //Checking which opto switch changed.
        P1IES ^= BIT4;              //Toggle Pin P1.4, which is the edge selection of interrupt.
    }
    if((P1IFG & 0x18) == 0x08){     //Checking which opto switch changed.
        P1IES ^= BIT3;              //Toggle Pin P1.3, which is the edge selection of interrupt.
    }

    //24 11
    //16 10
    //8 01
    //0 00
    aOld = aNew;                    //Give aOld the new value of state A.
    bOld = bNew;                    //Give bOld the new value of state B.
    state = 0;                      //State will begin as 0.
    if((P1IN & 0x18) == 24){        //If the input value is 24, means that both switches are in black area.
        aNew=1;                     //Setting the new value of A to 1.
        bNew=1;                     //Setting the new value of B to 1.
    }
    else if((P1IN & 0x18) == 16){   //If the input value is 16, means that A is in black area and B is in white.
        aNew=1;                     //Setting the new value of A to 1.
        bNew=0;                     //Setting the new value of B to 0.
    }
    else if((P1IN & 0x18) == 8){    //If the input value is 8, means that B is in black area and A is in white.
        aNew=0;                     //Setting the new value of A to 0.
        bNew=1;                     //Setting the new value of B to 1.
    }
    else if((P1IN & 0x18) == 0){    //If the input value is 0, means both switches are in white.
        aNew=0;                     //Setting the new value of A to 0.
        bNew=0;                     //Setting the new value of B to 0.
    }

    // -------------logic of tables in Appendix A --------------//
    state = state*2;                //Shift to the left.
    state = state + aOld;           //Add bit A, which is the old state of A.
    state = state*2;                //Shift to the left.
    state = state + bOld;           //Add bit B, which is the old state of B.
    state = state*2;                //Shift to the left.
    state = state + aNew;           //Add bit 4 A, which is the new state of A.
    state = state*2;                //Shift to the left.
    state = state + bNew;           //Add bit B, which is the new state of B.
    oldState = state;               //Give oldSate the new value of state.

    P1IFG = 0x00;                   //Flag interrupt cleared.

}
